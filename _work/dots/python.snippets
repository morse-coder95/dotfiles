global !p
import re
def toSnakeCase(val):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', val)
	return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
endglobal

snippet compare "Compare actual expected"
compare(expected=${1:expected}, actual=${2:actual})
endsnippet

snippet pdb "Insert a pdb.set_trace"
import pdb
pdb.set_trace()
endsnippet

snippet main "if name main"
if __name__ == '__main__':
	${1:CLASS_TO_RUN.run()}
endsnippet

snippet driversetup "Setup for driver script"
#!/usr/bin/env python

from ecn.batch.batch_dispatch import batchDispatch

CLASS_TO_RUN = batchDispatch({})

if __name__ == '__main__':
	CLASS_TO_RUN.run()
endsnippet

snippet testsetup "Setup for a batch tests"
from nose.tools import nottest

from ecn.testutils.batch_options import set_options
from ecn.testutils.db import DatabaseTestCase
from testfixtures import compare

from ${2:some.place} import $1

MODULE = $1.__module__
CLASS = MODULE + '.' + $1.__name__


class Test${1:ClassName}(DatabaseTestCase):

	platform = "${3:cone}"

	@nottest
	def makeTestee(self, init=True, **kwargs):
		testee = $1()
		defaults = {
			# No required args yet
		}
		defaults.update(**kwargs)
		if "env" not in defaults and "environment" not in defaults:
			defaults["env"] = self.env
		set_options(testee, **defaults)
		if init:
			testee.init()
		return testee

	def test_name(self):
		testee = self.makeTestee()
		compare(actual=testee.name(), expected="`!p snip.rv=toSnakeCase(t[1])`")
endsnippet

snippet batchsetup "Setup batch class"
from ecn.batch import Batch


class ${1:MyClass}(Batch):

	def init(self):
		pass

	def name(self):
		return "`!p snip.rv=toSnakeCase(t[1])`"

	def addOptions(self):
		pass

	def handleJob(self):
		pass
endsnippet
